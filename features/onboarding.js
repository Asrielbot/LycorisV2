// features/onboarding.js

export default async function onboarding(client, member) {
  try {
    const welcomeChannel =
      member.guild.systemChannel ||
      member.guild.channels.cache.find(
        (c) => c.name.toLowerCase().includes("accueil") && c.isTextBased()
      );

    if (!welcomeChannel) return;

    const message = await welcomeChannel.send({
      content:
        `üëã Bienvenue ${member.user} !\n\n` +
        `Choisis ton profil en cliquant sur un emoji :\n` +
        `üéì √âtudiant\nüéÆ Gamer\nüíº Pro`,
    });

    await message.react("üéì");
    await message.react("üéÆ");
    await message.react("üíº");

    const filter = (reaction, user) =>
      ["üéì", "üéÆ", "üíº"].includes(reaction.emoji.name) && user.id === member.id;

    const collector = message.createReactionCollector({
      filter,
      max: 1,
      time: 30000,
    });

    collector.on("collect", async (reaction) => {
      const emoji = reaction.emoji.name;

      const roleMap = {
        "üéì": "1391085004653858928", // ID du r√¥le Etudiant
        "üéÆ": "1391085024928862310", // ID du r√¥le Gamer
        "üíº": "1391085038862336121", // ID du r√¥le Pro
      };

      const roleId = roleMap[emoji];
      const role = member.guild.roles.cache.get(roleId);

      if (role) {
        await member.roles.add(role);
        await welcomeChannel.send(
          `‚úÖ ${member.user} a re√ßu le r√¥le **${role.name}**.`
        );
      } else {
        await welcomeChannel.send(
          `‚ö†Ô∏è Le r√¥le correspondant √† l‚Äôemoji ${emoji} est introuvable.`
        );
      }
    });

    collector.on("end", (collected) => {
      if (collected.size === 0) {
        welcomeChannel.send(`‚è≥ ${member.user}, tu n‚Äôas pas r√©agi √† temps.`);
      }
    });
  } catch (error) {
    console.error("‚ùå Erreur onboarding :", error);
  }
}
